{"version":3,"file":"static/js/846.14bb4922.chunk.js","mappings":"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","sources":["component/products/createproduct.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport AddPopup from '../popup';\r\n\r\nexport default function CreateProducts() {\r\n  const [productdata, setproductdata] = useState({\r\n    name: \"\",\r\n    othername: \"\",\r\n    category: \"\",\r\n    MRP: \"\",\r\n    salingprice: \"\",\r\n    Cost: \"\",\r\n    Serialrequired: \"\"\r\n  });\r\n  const [errmassage, seterrmassage] = useState('')\r\n\r\n  const [serialInput, setSerialInput] = useState('');\r\n  const [serialNumbers, setSerialNumbers] = useState([]);\r\n  const [formErrors, setFormErrors] = useState({});\r\n  const [categories, setCategories] = useState([]);\r\n  const [filteredCategories, setFilteredCategories] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [selectedcat, setselectedcat] = useState('');\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const apiKey = \"https://bwithf.onrender.com\";\r\n\r\n  // Create refs for input fields\r\n  const nameRef = useRef(null);\r\n  const categoryRef = useRef(null);\r\n  const MRPRef = useRef(null);\r\n  const salingpriceRef = useRef(null);\r\n  const serialInputRef = useRef(null);\r\n  const SerialrequiredRef = useRef(null);\r\n\r\n  const handleChange = (e) => {\r\n    setSerialInput(e.target.value);\r\n  };\r\n\r\n  const handleAddSerial = () => {\r\n    if (serialInput.trim() && !serialNumbers.includes(serialInput.trim())) {\r\n      setSerialNumbers([...serialNumbers, serialInput.trim()]);\r\n      setSerialInput('');\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e, nextRef) => {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      nextRef.current.focus(); // Move focus to the next input\r\n    }\r\n  };\r\n\r\n  const handleRemoveSerial = (serialToRemove) => {\r\n    setSerialNumbers(serialNumbers.filter(serial => serial !== serialToRemove));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    const { name, category, MRP, salingprice, Serialrequired } = productdata;\r\n\r\n    if (!name.trim()) errors.name = 'Product name is required';\r\n    if (!category.trim()) errors.category = 'Category is required';\r\n    if (!MRP.trim() || isNaN(MRP)) errors.MRP = 'Valid MRP is required';\r\n    if (!salingprice.trim() || isNaN(salingprice)) errors.salingprice = 'Valid selling price is required';\r\n    if (!Serialrequired) errors.Serialrequired = 'Serial requirement status is required';\r\n\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const addproduct = async () => {\r\n    if (!validateForm()) return;\r\n    try {\r\n      const { name, category, MRP, salingprice, Serialrequired } = productdata;\r\n      let name1 = name.toString();\r\n      let Category1 = category.toString();\r\n      let MRP1 = MRP.toString();\r\n      let salingprice1 = salingprice.toString();\r\n      let Serialrequired1 = Serialrequired.toString();\r\n      let token = localStorage.getItem('token');\r\n\r\n      let response = await axios.post(\r\n        `${apiKey}/api/product/addproduct`,\r\n        { name: name1, category: Category1, MRP: MRP1, salingprice: salingprice1, othername: serialNumbers, Serialrequired: Serialrequired1 },\r\n        { headers: { \"authtoken\": token } }\r\n      );\r\n\r\n\r\n      if(response.data.success){\r\n        seterrmassage(\r\n          <>\r\n        <p className=\"text-green-600 font-semibold text-lg mb-2\">{response.data.message}</p>\r\n                <div className=\"relative w-full h-2 rounded-full overflow-hidden bg-green-200 mt-4\">\r\n                    <div className=\"absolute top-0 left-0 h-full bg-green-500 animate-progress-bar2\" style={{ animationDuration: '0.5s' }}></div>\r\n                </div>\r\n          </>\r\n      );\r\n      handleAddItem( );\r\n \r\n       }else{\r\n        \r\n         seterrmassage(  <>\r\n          <p className=\"text-red-600 font-semibold text-lg mb-2\">{response.data.message}</p>\r\n                <div className=\"relative w-full h-2 rounded-full overflow-hidden bg-red-200 mt-4\">\r\n                    <div className=\"absolute top-0 left-0 h-full bg-red-500 animate-progress-bar2\" style={{ animationDuration: '0.5s' }}></div>\r\n                </div>\r\n            </>);\r\n       handleAddItem();\r\n\r\n     }  \r\n      // Handle response\r\n      setproductdata({\r\n        name: \"\",\r\n        othername: \"\",\r\n        category: \"\",\r\n        MRP: \"\",\r\n        salingprice: \"\",\r\n        Serialrequired: \"\"\r\n      });\r\n     } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  const onchange = (e) => {\r\n    setproductdata({ ...productdata, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleChanges = (e) => {\r\n    setproductdata({\r\n      ...productdata,\r\n      Serialrequired: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleCategoryClick = (category) => {\r\n    setselectedcat(category.name)\r\n    setproductdata({ ...productdata, category: category._id });\r\n    setDropdownOpen(false); // Close dropdown after selection\r\n  };\r\n\r\n  const token = localStorage.getItem('token');\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiKey}/api/category/fetchallcategory`, {\r\n          headers: {\r\n            'authtoken': token\r\n          }\r\n        });\r\n        setCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n      }\r\n    };\r\n  \r\n    fetchCategories();\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    // Filter categories based on search query\r\n    setFilteredCategories(\r\n      categories.filter(category =>\r\n        category.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n      )\r\n    );\r\n  }, [searchQuery, categories]);\r\n\r\n  const options = [\r\n    { value: 'YES', label: 'YES' },\r\n    { value: 'NO', label: 'NO' },\r\n  ];\r\n\r\n  const [showPopup, setShowPopup] = useState(false);\r\n\r\n  const handleAddItem = () => {\r\n      // Simulate an add item action\r\n      setShowPopup(true);\r\n  };\r\n\r\n  const handleClosePopup = () => {\r\n      setShowPopup(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"\">\r\n      <div className=\"App\">\r\n            \r\n            <AddPopup show={showPopup} onClose={handleClosePopup} message={errmassage}  />\r\n       </div>\r\n        <div className=\"mt-4 lg:w-full\">\r\n          <div className='text-[12px] ml-2 text-red-600'>\r\n            {/* Display error message */}\r\n          </div>\r\n          <div className=\"bg-[#f2f2f2] grid md:grid-cols-2 text-black px-2 gap-6 md:gap-6 items-start\">\r\n            <div>\r\n              <input\r\n                type='text'\r\n                name='name'\r\n                onChange={onchange}\r\n                value={productdata.name}\r\n                placeholder='Product Name'\r\n                ref={nameRef}\r\n                onKeyPress={(e) => handleKeyPress(e, categoryRef)}\r\n                className={`px-3 py-1 border-black w-[100%] border-[2px] rounded-md ${formErrors.name ? 'border-red-500' : ''}`}\r\n              />\r\n              {formErrors.name && <p className=\"text-red-500 text-xs\">{formErrors.name}</p>}\r\n            </div>\r\n            <div>\r\n              <input\r\n                type='text'\r\n                name='MRP'\r\n                onChange={onchange}\r\n                value={productdata.MRP}\r\n                placeholder='MRP'\r\n                ref={MRPRef}\r\n                onKeyPress={(e) => handleKeyPress(e, salingpriceRef)}\r\n                className={`px-3 py-1 border-black w-[100%] border-[2px] rounded-md ${formErrors.MRP ? 'border-red-500' : ''}`}\r\n              />\r\n              {formErrors.MRP && <p className=\"text-red-500 text-xs\">{formErrors.MRP}</p>}\r\n            </div>\r\n            <div>\r\n              <input\r\n                type='text'\r\n                name='salingprice'\r\n                onChange={onchange}\r\n                value={productdata.salingprice}\r\n                placeholder='Selling Price'\r\n                ref={salingpriceRef}\r\n                onKeyPress={(e) => handleKeyPress(e, serialInputRef)}\r\n                className={`px-3 py-1 border-black w-[100%] border-[2px] rounded-md ${formErrors.salingprice ? 'border-red-500' : ''}`}\r\n              />\r\n              {formErrors.salingprice && <p className=\"text-red-500 text-xs\">{formErrors.salingprice}</p>}\r\n            </div>\r\n           \r\n            \r\n              <div className='relative'>\r\n                <button\r\n                  type='button'\r\n                  onClick={() => setDropdownOpen(!dropdownOpen)}\r\n                  className={`  px-3 py-1 border-black border-[2px] rounded-md w-[100%] ${formErrors.category ? 'border-red-500' : ''}`}\r\n                >\r\n                  {productdata.category ? `Selected: ${selectedcat}` : 'Select Category'}\r\n                </button>\r\n                {dropdownOpen && (\r\n                  <div className=\"absolute z-10 bg-white border border-gray-300 rounded-md shadow-lg w-full mt-2\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder=\"Search categories...\"\r\n                      value={searchQuery}\r\n                      onChange={(e) => setSearchQuery(e.target.value)}\r\n                      className=\"w-full px-3 py-2 border-b border-gray-300 rounded-t-md\"\r\n                    />\r\n                    <div className=\"max-h-60 overflow-y-auto\">\r\n                      {filteredCategories.map((category) => (\r\n                        <button\r\n                          key={category._id}\r\n                          onClick={() => handleCategoryClick(category)}\r\n                          className=\"w-full px-3 py-2 text-left hover:bg-gray-200\"\r\n                        >\r\n                          {category.name}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                {formErrors.category && <p className=\"text-red-500 text-xs\">{formErrors.category}</p>}\r\n              </div>\r\n              <div className=\"relative\">\r\n                <input\r\n                  type='text'\r\n                  onChange={handleChange}\r\n                  onKeyPress={(e) => handleKeyPress(e, SerialrequiredRef)}\r\n                  value={serialInput}\r\n                  name='serialNumbers'\r\n                  placeholder=\"Enter othername\"\r\n                  ref={serialInputRef}\r\n                  className={`px-3 py-1 w-[100%] border-black border-[2px] rounded-md ${formErrors.serialNumbers ? 'border-red-500' : ''}`}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className='w-[100px]'\r\n                  onClick={handleAddSerial}\r\n                >\r\n                  Add Name\r\n                </button>\r\n                {formErrors.serialNumbers && <p className=\"text-red-500 text-xs\">{formErrors.serialNumbers}</p>}\r\n                {serialNumbers.length > 0 && (\r\n                  <div className=\"mt-4\">\r\n                    <h2 className=\"font-bold\">Other name</h2>\r\n                    <ul className=\"grid gap-2 w-[50%] mt-2\">\r\n                      {serialNumbers.map((serial, index) => (\r\n                        <li key={index} className=\"flex justify-between bg-gray-200 p-2 rounded-md\">\r\n                          <span>{serial}</span>\r\n                          <button\r\n                            onClick={() => handleRemoveSerial(serial)}\r\n                            className=\"text-red-500 hover:text-red-700\"\r\n                          >\r\n                            Remove\r\n                          </button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div>\r\n\r\n              <select\r\n                name='Serialrequired'\r\n                onChange={handleChanges}\r\n                value={productdata.Serialrequired}\r\n                ref={SerialrequiredRef}\r\n                className={`px-3 py-1 border-black w-[100%] border-[2px] rounded-md ${formErrors.Serialrequired ? 'border-red-500' : ''}`}\r\n                >\r\n                <option value=\"\">Serial Required</option>\r\n                {options.map(option => (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              {formErrors.Serialrequired && <p className=\"text-red-500 text-xs\">{formErrors.Serialrequired}</p>}\r\n                    </div>\r\n            </div>\r\n          </div>\r\n          <div className='w-[100%] flex justify-center'>\r\n\r\n            <button\r\n              type='button'\r\n              onClick={addproduct}\r\n              className=\"mt-4 px-4 py-2 bg-blue-500 w-[50%] text-white rounded-md\"\r\n              >\r\n              Add Product\r\n            </button>\r\n              </div>\r\n        </div>\r\n      \r\n    </>\r\n  );\r\n}\r\n"],"names":["CreateProducts","productdata","setproductdata","useState","name","othername","category","MRP","salingprice","Cost","Serialrequired","errmassage","seterrmassage","serialInput","setSerialInput","serialNumbers","setSerialNumbers","formErrors","setFormErrors","categories","setCategories","filteredCategories","setFilteredCategories","searchQuery","setSearchQuery","selectedcat","setselectedcat","dropdownOpen","setDropdownOpen","apiKey","nameRef","useRef","categoryRef","MRPRef","salingpriceRef","serialInputRef","SerialrequiredRef","handleKeyPress","e","nextRef","key","preventDefault","current","focus","onchange","target","value","token","localStorage","getItem","useEffect","async","response","axios","get","headers","data","error","console","fetchCategories","filter","toLowerCase","includes","showPopup","setShowPopup","handleAddItem","_jsx","_Fragment","children","_jsxs","className","AddPopup","show","onClose","handleClosePopup","message","type","onChange","placeholder","ref","onKeyPress","onClick","map","_id","handleCategoryClick","handleAddSerial","trim","length","serial","index","handleRemoveSerial","serialToRemove","label","option","validateForm","errors","isNaN","Object","keys","name1","toString","Category1","MRP1","salingprice1","Serialrequired1","post","success","style","animationDuration"],"sourceRoot":""}